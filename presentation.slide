Everyday Cryptography
What ? How ? Why ?
15 Nov 2018
Tags: cryptography, go, security

Prasanna V & Kishan B
Application Developer, Thoughtworks

* Lets build a simple Authentication system
.image images/Authentication.jpeg _ 400
*Demo*Time*

.play -edit src/sources/encoding.go /VALIDATE_USERNAME_START_OMIT/,/VALIDATE_USERNAME_END_OMIT/

.html src/html/test.html

* Base64 Encoding - Is it the proper way then ?

*Definitely*NO!!!*Why*?*

- Anyone can decode it.
      No permission required.
      No keys are required.
      Less secure.
- Covert bytes to text format.
- We use it to convert bytes (like images, public key (DER format)) to store as string

.html src/html/test.html

* Yet another secure way - Encryption
.image images/Encryption.jpeg _ 500

.play -edit src/sources/encryption.go /VALIDATE_USERNAME_ENC_START_OMIT/,/VALIDATE_USERNAME_ENC_END_OMIT/

.html src/html/test.html

* What s happening here !!!

: presenter notes

.image images/BlockCipher.jpg _ 700

- Symmetric key encryption
- Non Deterministic encryption
- Block Cipher encryption

.html src/html/test.html

* Send information from John ‚ÜîÔ∏è Joseph

.image images/InformationExchange.jpg _ 150


    // Sender                           |       // Receiver
    secureKey := <AES-Symmetric-Key>    |       secureKey := <AES-Symmetric-Key>
    message.encrypt(secureKey)          |       message := cipherText.decrypt(secureKey)
    user.send(message)                  |       fmt.Println(message)

*Problem*üíÄ* :

*But*how*to*transmit*the*keys*"(AES-Symmetric-Key)"*securely*?* üßê
And the answer is *PKI*

.html src/html/test.html

* Public Key cryptography / Asymmetric key encryption

.image images/postbox.jpg _ 400

*Demo*Time*

.html src/html/test.html

* Revisit the message transfer from John ‚ÜîÔ∏è Joseph

Symmetric Vs Asymmetric encryption

- Symmetric key encryption is much faster than Asymmetric keys.
- Symmetric key - AES 256, 512 bits
- Asymmetric key - RSA 1024, 2048, 4096 bits

*Problem*üíÄ*
1. How we know information is sent only by John ?
2. How we know the information is not tampered in the middle ?

And the answer is *Digital*Signatures*
.html src/html/test.html

* Digital Signatures

- Quick primer on how digital signatures work.

How we know only John is sending the info ?
Ok. So there should be additional information sent along the message which says,
    - I am John sending you the message
    - Some kind of checksum, which says this is the content I am sending
Lets separate the message and that information by "."

Message.Signature

.html src/html/test.html
* Connect all the dots and lets see, How https works ?

- 3 phases handshake
- Key exchange using PKI
- Digital Signatures

What happens if the server is not the actual server and instead its a hacker. Simply,

*Man*In*Middle*Attack*
How this can be prevented ?

And the answer  is *Certificate*Authority*

.html src/html/test.html
* Certificate Authority

.image images/CertificateAuthority.png _ 400

*Demo*Time*

.html src/html/test.html

* Lets Encrypt

*Demo*Time*

.html src/html/test.html
