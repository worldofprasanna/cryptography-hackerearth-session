#+slide-stylesheet=//fonts.googleapis.com/css?family=Open+Sans:regular,semibold|Varela
Everyday Cryptography
Using Open Source tools
15 Nov 2018
Tags: cryptography, go, security


Prasanna V
Technology Lead, Thoughtworks

Kishan B
Senior Consultant, Thoughtworks

* About
.html src/html/line_break.html

.html src/html/built-in-security.html

.html src/html/footer.html

* Lets build a simple Authentication system
.html src/html/line_break.html

.image images/Authentication.jpeg _ 400
*Demo*Time*

.play -edit src/sources/encoding.go /VALIDATE_USERNAME_START_OMIT/,/VALIDATE_USERNAME_END_OMIT/

.html src/html/footer.html

* Base64 Encoding - Is it the proper way then ?
.html src/html/line_break.html

*Definitely*NO!!!*Why*?*

- Anyone can decode it.
      No permission required.
      No keys are required.
      Less secure.
- Covert bytes to text format.
- We use it to convert bytes (like images, public key (DER format)) to store as string

.html src/html/footer.html

* Yet another secure way - Encryption
.html src/html/line_break.html

.image images/Encryption.jpeg _ 500

    $ echo "secret password" | openssl enc -aes-256-cbc -base64
    $ echo "<encrypted password>" | openssl enc -d -aes-256-cbc -base64

.html src/html/footer.html

* What s happening here !!!
.html src/html/line_break.html

.link https://slides.com/worldofprasanna/deck/live#/ How it works ?

- Symmetric key encryption
- Non Deterministic encryption
- Block Cipher encryption

.html src/html/footer.html

* Send information from Alice ‚ÜîÔ∏è Bob
.html src/html/line_break.html

.image images/InformationExchange.jpg _ 150


    // Sender                           |       // Receiver
    secureKey := <AES-Symmetric-Key>    |       secureKey := <AES-Symmetric-Key>
    message.encrypt(secureKey)          |       message := cipherText.decrypt(secureKey)
    user.send(message)                  |       fmt.Println(message)

*Problem*üíÄ* :

*But*how*to*transmit*the*keys*"(AES-Symmetric-Key)"*securely*?* üßê
And the answer is *PKI*

.html src/html/footer.html

* Public Key cryptography / Asymmetric key encryption
.html src/html/line_break.html

.link https://slides.com/worldofprasanna/asymmetric-encryption/live#/ How it works?
.image images/postbox.jpg _ 400

*Demo*Time*

.code data/asymmetric.demo

.html src/html/footer.html

* Revisit the message transfer from Alice ‚ÜîÔ∏è Bob
.html src/html/line_break.html

Symmetric Vs Asymmetric encryption

- Symmetric key encryption is much faster than Asymmetric encryption.
- Symmetric key - AES 128, 192, 256 bits
- Asymmetric key - RSA 1024, 2048, 4096 bits
- Asymmetric key is more effective in key management

*Problem*üíÄ*
1. How do we know information is sent only by Alice ?
2. How do we know the information is not tampered in the middle ?

And the answer is *Digital*Signatures*

.html src/html/footer.html

* Digital Signatures
.html src/html/line_break.html

.link https://slides.com/worldofprasanna/digital-signature/live#/ Quick primer

Ok. So there should be additional information sent along the message which says,

    - I am Alice sending you the message
    - Some kind of checksum, which says this is the content I am sending

Lets separate the message and that information by "."
Format: Message.Signature

.html src/html/footer.html
* Connect all the dots and lets see, How https works ?
.html src/html/line_break.html

.link https://slides.com/worldofprasanna/https-works/live#/ Everything Together

What happens if the public key does not belong to twitter, instead its a hacker's public key ?

.image images/MIM.png _ 300

*Man*In*Middle*Attack*
How this can be prevented ?

And the answer  is *Certificate*Authority*

.html src/html/footer.html
* Certificate Authority
.html src/html/line_break.html

.image images/CertificateAuthority.png _ 300
.link https://slides.com/worldofprasanna/certificate-authority/live#/ How it works?
.code data/mkcert.demo

.html src/html/footer.html

* Lets Encrypt
.html src/html/line_break.html

*Demo*Time*

.html src/html/footer.html

* Thank you

- Prasanna V [vprasana@thoughtworks.com]
- Kishan B [bkishan@thoughtworks.com]

Deck can be found at,

.link https://github.com/worldofprasanna/everyday-cryptography-hackerearth

.html src/html/footer.html
